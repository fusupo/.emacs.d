#+TITLE: scratch 

* SCRATCH


# (custom-set-variables
#  ;; custom-set-variables was added by Custom.
#  ;; If you edit it by hand, you could mess it up, so be careful.
#  ;; Your init file should contain only one such instance.
#  ;; If there is more than one, they won't work right.
#  '(ansi-color-names-vector
#    ["#eee8d5" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#839496"])
#  '(compilation-message-face (quote default))
#  '(cua-global-mark-cursor-color "#2aa198")
#  '(cua-normal-cursor-color "#657b83")
#  '(cua-overwrite-cursor-color "#b58900")
#  '(cua-read-only-cursor-color "#859900")
#  '(custom-safe-themes
#    (quote
#     ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "e16a771a13a202ee6e276d06098bc77f008b73bbac4d526f160faa2d76c1dd0e" "9dae95cdbed1505d45322ef8b5aa90ccb6cb59e0ff26fef0b8f411dfc416c552" default)))
#  '(fci-rule-color "#eee8d5")
#  '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
#  '(highlight-symbol-colors
#    (--map
#     (solarized-color-blend it "#fdf6e3" 0.25)
#     (quote
#      ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
#  '(highlight-symbol-foreground-color "#586e75")
#  '(highlight-tail-colors
#    (quote
#     (("#eee8d5" . 0)
#      ("#B4C342" . 20)
#      ("#69CABF" . 30)
#      ("#69B7F0" . 50)
#      ("#DEB542" . 60)
#      ("#F2804F" . 70)
#      ("#F771AC" . 85)
#      ("#eee8d5" . 100))))
#  '(hl-bg-colors
#    (quote
#     ("#DEB542" "#F2804F" "#FF6E64" "#F771AC" "#9EA0E5" "#69B7F0" "#69CABF" "#B4C342")))
#  '(hl-fg-colors
#    (quote
#     ("#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3" "#fdf6e3")))
#  '(ledger-reports
#    (quote
#     (("monthly expense report" "ledger --monthly register ^expenses")
#      ("bal" "ledger -f %(ledger-file) bal")
#      ("reg" "ledger -f %(ledger-file) reg")
#      ("payee" "ledger -f %(ledger-file) reg @%(payee)")
#      ("account" "ledger -f %(ledger-file) reg %(account)"))))
#  '(magit-use-overlays nil)
#
#  '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#eee8d5" 0.2))
#  '(term-default-bg-color "#fdf6e3")
#  '(term-default-fg-color "#657b83")
#  '(vc-annotate-background nil)
#  '(vc-annotate-color-map
#    (quote
#     ((20 . "#dc322f")
#      (40 . "#c85d17")
#      (60 . "#be730b")
#      (80 . "#b58900")
#      (100 . "#a58e00")
#      (120 . "#9d9100")
#      (140 . "#959300")
#      (160 . "#8d9600")
#      (180 . "#859900")
#      (200 . "#669b32")
#      (220 . "#579d4c")
#      (240 . "#489e65")
#      (260 . "#399f7e")
#      (280 . "#2aa198")
#      (300 . "#2898af")
#      (320 . "#2793ba")
#      (340 . "#268fc6")
#      (360 . "#268bd2"))))
#  '(vc-annotate-very-old-color nil)
#  '(weechat-color-list
#    (quote
#     (unspecified "#fdf6e3" "#eee8d5" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#657b83" "#839496"))))
# (custom-set-faces
#  ;; custom-set-faces was added by Custom.
#  ;; If you edit it by hand, you could mess it up, so be careful.
#  ;; Your init file should contain only one such instance.
#  ;; If there is more than one, they won't work right.
#  )

* Config

** General Config

*** Winner mode - undo and redo window configuration

=winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press =C-c <left>=.

#+begin_src emacs-lisp
  (xtof/package-install 'winner)
  (use-package winner
    :config (winner-mode 1))
#+end_src





*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo. 
# 
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src





** Nav

*** Windmove - switching between windows

Windmove lets you move between windows with something more natural than cycling through =C-x o= (=other-window=).
Windmove doesn't behave well with Org, so we need to use different keybindings.

#+begin_src emacs-lisp
;;  (use-package windmove
;;    :bind
;;    (("<f2> <right>" . windmove-right)
;;     ("<f2> <left>" . windmove-left)
;;     ("<f2> <up>" . windmove-up)
;;     ("<f2> <down>" . windmove-down)))
#+end_src

*** Make window splitting more useful

Copied from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury
#+begin_src emacs-lisp
(defun xtof/vsplit-last-buffer (prefix)
  "Split the window vertically and display the previous buffer."
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (unless prefix
    (switch-to-next-buffer)))
(defun xtof/hsplit-last-buffer (prefix)
  "Split the window horizontally and display the previous buffer."
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (unless prefix (switch-to-next-buffer)))
(bind-key "C-x 2" 'xtof/vsplit-last-buffer)
(bind-key "C-x 3" 'xtof/hsplit-last-buffer)

#+end_src



** Diagrams and graphics

Ooooh. Graphviz and Ditaa make it easier to create diagrams from Emacs. See [[http://sachachua.com/evil-plans]] for examples and source.

#+begin_src emacs-lisp
;;  (setq org-ditaa-jar-path "~/Documents/bin/ditaa0_9.jar")
;;  (setq org-startup-with-inline-images t)
;;  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
;;  (org-babel-do-load-languages
;;   'org-babel-load-languages
;;   '((dot . t)
;;     (ditaa . t) 
;;     (R . t)))
;;  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

** Presentations

#+begin_src emacs-lisp
;;(use-package ox-reveal)
#+end_src
    
