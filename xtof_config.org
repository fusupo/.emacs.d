#+TITLE: xtof_config

* CONFIG
** Personal Info

#+begin_src emacs-lisp
  (setq user-full-name "Marc-P. Christophe"
        user-mail-address "m@xtof.net")
#+end_src

** Backups

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

** History

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src

** Packages
*** Initialize Package System

#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

  (package-initialize)

  (when (not package-archive-contents)
        (package-refresh-contents))
#+end_src

*** Additional Package load Paths

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp")
#+end_src

*** List Packages

#+begin_src emacs-lisp
  (defvar xtof/my-packages '(use-package
                              helm
                              helm-swoop
                              guide-key
                              org
                              solarized-theme
                              zenburn-theme
                              clojure-mode
                              smartparens
                              cider
                              magit
                              rainbow-delimiters
                              ledger-mode
                              projectile
                              aggressive-indent
                              pretty-mode
                              rainbow-blocks
                              org-ac
                              ac-helm
                              ac-cider
                              fill-column-indicator
                              workgroups2
                              indent-guide
                              exec-path-from-shell
                              web-mode
                              web-beautify
                              js2-mode
                              skewer-mode
                              helm-projectile
                              4clojure
                              org2blog
                              ac-html))

#+end_src
    
** Visual Config
*** Font

#+begin_src emacs-lisp
  ;;(set-face-attribute 'default nil :font "Terminus (TTF)" :height 110)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 100)
#+end_src

*** Windows

#+begin_src emacs-lisp
  (when window-system
        (tooltip-mode -1)
        (tool-bar-mode -1)
        (menu-bar-mode -1)
        (scroll-bar-mode -1))
#+end_src

#+begin_src emacs-lisp
  (global-linum-mode 1)
  (setq initial-frame-alist '((top . 1) (left . 1) (width . 100) (height . 60)))
  (setq inhibit-startup-screen t)
#+end_src
** Misc Config

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)   
  ;;(setq-default fill-column 80)
#+end_src

UTF-8
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** Frequently-accessed files

#+begin_src emacs-lisp :results silent
  (mapcar
   (lambda (r)
     (set-register (car r) (cons 'file (cdr r))))
   '((?c . "~/.emacs.d/xtof_config.org")
     (?i . "~/.emacs.d/xtof_init.org")
     (?s . "~/.emacs.d/xtof_startup.org")
     (?p . "~/Documents/org/projects.org")
     (?l . "~/Documents/org/log.org")
     (?f . "~/Documents/org/flagged.org")
     (?m . "~/Documents/org/memos.org")
     (?v . "~/Documents/org/inbox.org")
     (?x . "~/.emacs.d/init.el")
     (?b . "~/Documents/ledger/budget.ledger")
  ))
#+end_src

** Zone
#+begin_src emacs-lisp

  (require 'zone)

(defun zone-choose (pgm)
    "Choose a PGM to run for `zone'."
    (interactive
     (list
      (completing-read
       "Program: "
       (mapcar 'symbol-name zone-programs))))
    (let ((zone-programs (list (intern pgm))))
      (zone)))


;;(setq zone-programs [zone-pgm-paragraph-spaz])
#+end_src

** Shut The Fuck Up

#+begin_src emacs-lisp
  (setq visible-bell 1)
;;  (setq visible-bell nil)
;;  (setq ring-bell-function `(lambda ()
;;    (set-face-background 'default "DodgerBlue")
;;    (set-face-background 'default "black")))
#+end_src

** SCHEME

#+begin_src emacs-lisp
(setenv "MITSCHEME_LIBRARY_PATH"
    "/Applications/Scheme.app/Contents/Resources/")

#+end_src
