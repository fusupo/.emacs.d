#+TITLE: xtof_init

* ///////////////////////  PERSONAL INFO

#+begin_src emacs-lisp
  (setq user-full-name "Marc-P. Christophe"
        user-mail-address "m@xtof.net"
        user-homepage "http://www.marcchristophe.com")
#+end_src

* /////////////////////////////  BACKUPS

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

* /////////////////////////////  HISTORY

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src

* ////////////////////////////  PACKAGES

Initialize Package System
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

  (package-initialize)

  (when (not package-archive-contents)
        (package-refresh-contents))
#+end_src

Additional Package load Paths
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp")
#+end_src

List Packages
#+begin_src emacs-lisp
  (defvar xtof/my-packages '(use-package))
#+end_src

Init use-package
#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

* /////////////////////////  LOOK & FEEL
** Font

#+begin_src emacs-lisp
  ;;(set-face-attribute 'default nil :font "Terminus (TTF)" :height 110)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 100)
#+end_src

** Windows

#+begin_src emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    ;;(blink-cursor-mode t)
    (setq cursor-type 'bar)
    (fringe-mode -1))

  ;; mode line settings
  (global-linum-mode t)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)

  ;;(setq initial-frame-alist '((top . 1) (left . 1) (width . 100) (height . 60)))
  (setq inhibit-startup-screen t)
  (tooltip-mode nil)

  ;; nice scrolling
  (setq scroll-margin 2
      scroll-conservatively 100000
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1))
;;(5 ((shift) . 1) ((control)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-default 'indent-tabs-mode nil)
(set-default 'indicate-empty-lines t)

(setq frame-title-format
      '((:eval (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) "%b"))))
#+end_src

** Quiet Alerts

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell nil)
;;  (setq ring-bell-function `(lambda ()
;;    (set-face-background 'default "DodgerBlue")
;;    (set-face-background 'default "black")))
#+end_src

** Yes/No

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)   
  ;;(setq-default fill-column 80)
#+end_src

** Keys

#+BEGIN_SRC emacs-lisp

;; general emacs stuff
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; general development
;;(global-set-key (kbd "M-r") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c w") 'whitespace-toggle-options)

;; clojure stuff
;;(global-set-key (kbd "C-c C-j") 'cider-jack-in)

;; Start eshell or switch to it if it's active.
(global-set-key (kbd "C-x t") 'eshell)

;; Start a new eshell even if one is active.
(global-set-key (kbd "C-x T") (lambda () (interactive) (eshell t)))

;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;;List Packages 
(global-set-key (kbd "C-c m") 'package-list-packages)

#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
; save cursor position within files
(require 'saveplace)
(setq save-place-file (expand-file-name "saveplace" xtof/savefile-directory))
(setq-default save-place t)

; save minibuffer history across sessions
(setq savehist-file (expand-file-name "savehist" xtof/savefile-directory))
(savehist-mode 1)

; pick up changes to files on disk automatically (ie, after git pull)
(global-auto-revert-mode 1)

; wrap lines in a tasteful way
;;(global-visual-line-mode nil)

#+END_SRC

* ///////////  FREQUENTLY_ACCESSED FILES

#+begin_src emacs-lisp :results silent
  (mapcar
   (lambda (r)
     (set-register (car r) (cons 'file (cdr r))))
   '((?c . "~/.emacs.d/xtof_config.org")
     (?i . "~/.emacs.d/xtof_init.org")
     (?o . "~/.emacs.d/xtof_org.org")
     (?s . "~/.emacs.d/xtof_startup.org")
     (?p . "~/Documents/org/projects.org")
     (?l . "~/Documents/org/log.org")
     (?f . "~/Documents/org/flagged.org")
     (?m . "~/Documents/org/memos.org")
     (?v . "~/Documents/org/inbox.org")
     (?x . "~/.emacs.d/init.el")
     (?b . "~/Documents/ledger/budget.ledger")
  ))
#+end_src

* /////////////////////////  MISC CONFIG

UTF-8
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
  ;; sane defaults
  (prefer-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
