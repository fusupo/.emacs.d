#+TITLE xtof_org

* ////////////////////////////////////////////////////////////////////////  INIT

#+begin_src emacs-lisp
  (use-package org
    :ensure org
    :defer t
    :init (progn
            (setq org-directory xtof/org-directory)
            (setq org-default-notes-file  (format "%s/%s" xtof/org-directory "inbox.org"))
            (setq org-mobile-files '(org-agenda-files xtof/org-directory))

            ;; mobile org
            (setq org-mobile-inbox-for-pull (format "%s/%s" xtof/org-directory "inbox.org"))
            (setq org-mobile-directory xtof/org-mobile-directory)


            ;; refile
            (setq org-reverse-note-order t)
            (setq org-refile-use-outline-path nil)
            (setq org-refile-allow-creating-parent-nodes 'confirm)
            (setq org-refile-use-cache nil)
            (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
            ;;(setq org-blank-before-new-entry nil)

            ;; tags
            (setq org-tag-alist '(("@work" . ?b) 
                                  ("@home" . ?h) 
                                  ("@writing" . ?w)
                                  ("@errands" . ?e) 
                                  ("@drawing" . ?d)
                                  ("@coding" . ?c)
                                  ("@phone" . ?p)
                                  ("@reading" . ?r)
                                  ("@computer" . ?l)
                                  (:startgroup . nil)
                                  ("lowenergy" . ?0)
                                  ("highenergy" . ?9)
                                  (:endgroup . nil)
                                  ("#HEALTH_BEAUTY" . ?B)
                                  ("#HOME_FAMILY" . ?F)
                                  ("#ART_PHILOSOPHY" . ?P)
                                  ("#RESEARCH_EDUCATION" . ?E)
                                  ("#WORK_MONEY" . ?M)
                                  ("#ORGANIZATION_REGIMENT" . ?R)
                                  ))

            ;; look & feel
            ;;(setq org-level-color-stars-only t)
            (setq org-src-fontify-natively t)
            (setq org-tags-column -136)
            (setq org-agenda-dim-blocked-tasks nil))
    :config (progn
              ;; mobile org
              (add-hook 'after-init-hook 'org-mobile-pull)
              (add-hook 'kill-emacs-hook 'org-mobile-push))
    :bind(("C-c l" . org-store-link)
          ("C-c L" . org-insert-link-global)
          ("C-c O" . org-open-at-point-global)))
#+end_src

* /////////////////////////////////////////////////////////////////////  MODULES

#+begin_src emacs-lisp
  (setq org-modules '(org-habit
;;                      org-mouse
                      org-panel))
(org-load-modules-maybe t)
(eval-after-load 'org-mode
     (define-key org-mode-map [(control ?c) ?p] 'orgpan-panel))
#+end_src

* ////////////////////////////////////////////////////////////  TRACK TODO STATE

#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection t) ;; actually seems to be true by default
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)

  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "NEXT(n!/!)"
           "STARTED(s)"
           "WAITING(w@/!)"
           "SOMEDAY(.)"
           "|"
           "DONE(x!)"
           "CANCELLED(c@)")
          (sequence
           "TODELEGATE(-)"
           "DELEGATED(d)"
           "COMPLETE(x)")))
#+end_src

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "firebrick" :weight bold)
          ("NEXT" :foreground "red" :weight bold)
          ("STARTED" :foreground "gold" :weight bold)
          ("WAITING" :foreground "chocolate" :weight bold)
          ("SOMEDAY" :foreground "light steel blue" :weight bold)
          ("DONE" :foreground "olive drab" :weight bold)
          ("CANCELLED" :foreground "dim gray" :weight bold)
          ("TODELEGATE" :foreground "firebrick" :weight bold)
          ("DELEGATED" :foreground "chocolate" :weight bold)
          ("COMPLETE" :foreground "olive drab" :weight bold)))
#+end_src

#+begin_src emacs-lisp
  ;; Parent can't be marked as done unless all children are done
  (setq org-enforce-todo-dependencies t)
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
#+end_src

# #+begin_src emacs-lisp
#   (setq org-todo-state-tags-triggers
#         (quote (("CANCELLED" ("CANCELLED" . t))
#                 ("WAITING" ("WAITING" . t))
#                 ("HOLD" ("WAITING") ("HOLD" . t))
#                 (done ("WAITING") ("HOLD"))
#                 ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
#                 ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
#                 ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
# #+end_src

* ////////////////////////////////////////////////////////////////////  PROJECTS

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance '("PROJ"))
#+end_src

This code makes it easy for me to focus on one project and its tasks.

# #+begin_src emacs-lisp
#   (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
#   (add-to-list 'org-speed-commands-user '("W" widen))
#   (defun sacha/org-agenda-for-subtree ()
#     (interactive)
#     (if (derived-mode-p 'org-agenda-mode)
#       (let* ((marker (or (org-get-at-bol 'org-marker)
#                          (org-agenda-error)))
#              (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
#              (pos (marker-position marker))
#              (col (current-column))
#              newhead)
#         (org-with-remote-undo (marker-buffer marker)
#           (with-current-buffer (marker-buffer marker)
#             (widen)
#            (let ((org-agenda-view-columns-initially t))
#              (org-agenda nil "t" 'subtree)))))
#       (let ((org-agenda-view-columns-initially t))
#         (org-agenda nil "t" 'subtree))))
#   (add-to-list 'org-speed-commands-user '("T" sacha/org-agenda-for-subtree))
# #+end_src

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

* ///////////////////////////////////////  ENABLED FILTERING BY EFFORT ESTIMATES

per https://www.gnu.org/software/emacs/manual/html_node/org/Filtering_002flimiting-agenda-items.html
#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
        '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src

* //////////////////////////////////////////////////////////////////  TRACK TIME

from sach chua
#+begin_src emacs-lisp
  (setq org-clock-idle-time nil)
  (setq org-log-done 'time)
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (setq org-clock-report-include-clocking-task t)
  (defadvice org-clock-in (after xtof activate)
    "Mark STARTED when clocked in."
    (save-excursion
      (catch 'exit
        (cond
         ((derived-mode-p 'org-agenda-mode)
          (let* ((marker (or (org-get-at-bol 'org-marker)
                            (org-agenda-error)))
                 (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
                 (pos (marker-position marker))
                 (col (current-column))
                 newhead)
            (org-with-remote-undo (marker-buffer marker)
              (with-current-buffer (marker-buffer marker)
                (widen)
                (goto-char pos)
                (org-back-to-heading t)
                (if (org-get-todo-state)
                    (org-todo "STARTED"))))))
         (t (if (org-get-todo-state)
                (org-todo "STARTED")))))))
#+end_src

Too many clock entries clutter up a heading.
#+begin_src emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)
#+end_src

* //////////////////////////////////////////////////////////////////////  HABITS
  
#+begin_src emacs-lisp
  (setq org-habit-graph-column 80)
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-all-today t)
#+end_src

* ////////////////////////////////////////////////////////////  ESTIMATING TASKS
    
From "Add an effort estimate on the fly when clocking in" on the
[[http://orgmode.org/worg/org-hacks.html][Org Hacks]] page:

#+begin_src emacs-lisp
  (defun xtof/org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))

  (add-hook 'org-clock-in-prepare-hook 'xtof/org-mode-ask-effort)
#+end_src

* ////////////////////////////////////////////////  FLEXIBLE SCHEDULING OF TASKS

I (theoretically) want to be able to schedule tasks for dates like the first Saturday
of every month. Fortunately, [[http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month][someone else has figured that out!]]

#+begin_src emacs-lisp
;; Get this from https://raw.github.com/chenfengyuan/elisp/master/next-spec-day.el
;; (load "~/.emacs.d/elisp/next-spec-day.el" t)
#+end_src

* /////////////////////////////////////////////////////////////////  ORG-CAPTURE

#+begin_src emacs-lisp
  (defvar xtof/org-capture-project-template 
    "* TODO %^{Project} %^G:PROJ:
    %?")
  (defvar xtof/org-capture-task-template
    "* TODO %^{Task} %^G
    :PROPERTIES:
    :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|3:00|4:00}
    :END:
    %?")
  (defvar xtof/org-capture-habit-template
    "* TODO %^{Habit} %^G
    SCHEDULED: %^{schedule}T
    OPENED: %U
    :PROPERTIES:
    :STYLE: habit
    :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|3:00|4:00}
    :END:
    %?
    %i")
  (defvar xtof/org-capture-memo-template
    "* %^{Subject} %^G
    :PROPERTIES:
    :TO: %^{to|Self}
    :DATE: %U
    :END:
    %?")
  (defvar xtof/org-capture-note-template
    "* %^{Description} %^G
    :PROPERTIES: 
    :DATE: %U
    :END:
    %?")
  (defvar xtof/org-capture-activity-log-template
    "* %^{Title} %^G
    :PROPERTIES:
    :DATE: %U
    :END:
    %?")
  (defvar xtof/org-capture-dream-log-template
    "* %^{Title} %^G
    %?")
  (defvar xtof/org-capture-meditation-log-template
    "* %^{Title}
    :PROPERTIES:
    :STARTTIME: %^{start time}U
    :DURATION: %^{duration|0:30}
    :END:
    %?")
#+end_src

#+begin_src emacs-lisp
  (use-package org-capture
    :ensure org
    :defer t
    :config (progn
              (setq org-capture-templates 
                    `(("p" 
                       "Project" 
                       entry (file+headline "~/Documents/org/projects.org" "Projects") 
                       ,xtof/org-capture-project-template)
                      ("t"
                       "Task"
                       entry (file+headline "~/Documents/org/inbox.org" "Tasks")
                       ,xtof/org-capture-task-template)
                      ("h"
                       "Habit"
                       entry (file+headline "~/Documents/org/inbox.org" "Tasks")
                       ,xtof/org-capture-habit-template)
                      ("m"
                       "Memo" 
                       entry (file+datetree "~/Documents/org/memos.org") 
                       ,xtof/org-capture-memo-template)
                      ("n"
                       "Note"
                       entry (file+headline "~/Documents/org/notes.org" "Notes")
                       ,xtof/org-capture-note-template)
                      ;;
                      ("l" "logs")
                      ("la" 
                       "Activity Log Entry" 
                       entry (file+datetree "~/Documents/org/activity_log.org") 
                       ,xtof/org-capture-activity-log-template)
                      ("ld" 
                       "Dream Log Entry" 
                       entry (file+datetree "~/Documents/org/dream_log.org") 
                       ,xtof/org-capture-dream-log-template)
                      ("lm" 
                       "Meditation Log Entry" 
                       entry (file+datetree "~/Documents/org/meditation_log.org") 
                       ,xtof/org-capture-meditation-log-template))))
              :bind (("C-c c" . org-capture)))
#+end_src

* //////////////////////////////////////////////////////////////////  ORG-AGENDA
** pre-configure

Org agenda custom commands

There are quite a few custom commands here, and I often forget to use
them. =) But it's good to define them, and over time, I'll get the
hang of using these more!

| Key         | Description                                                                                     |
| .           | What am I waiting for?                                                                          |
| T           | Not really an agenda command - shows the to-do tree in the current file                         |
| b           | Shows business-related tasks                                                                    |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                     |
| w           | *Show all tasks for the upcoming week                                                            |
| W           | *Show all tasks for the upcoming week, aside from the routine ones                               |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home  |
| 0           | *Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                    |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                        |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                        |
| d           | Timeline for today (agenda, clock summary)                                                      |
| u           | Unscheduled tasks to do if I have free time                                                     |
| U           | Unscheduled tasks that are not part of projects                                                 |
| P           | Tasks by priority                                                                               |
| p           | My projects                                                                                     |
| 2           | Projects with tasks                                                                             |

# ;;    (defun sacha/org-agenda-skip-scheduled ()
# ;;      (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "\n]+>"))
# ;;    (setq org-agenda-custom-commands
# ;;          `(("T" tags-todo "TODO=\"TODO\"-goal-routine-SCHEDULED={.+}")
# ;;            ("b" todo ""
# ;;             ((org-agenda-files '("~/personal/business.org"))))
# ;;            ("B" todo ""
# ;;             ((org-agenda-files '("~/Dropbox/books"))))
# ;;            ("o" todo ""
# ;;             ((org-agenda-files '("~/personal/organizer.org"))))
# ;;            ("c" todo ""
# ;;             ((org-agenda-prefix-format "")
# ;;              (org-agenda-cmp-user-defined 'sacha/org-sort-agenda-items-todo)
# ;;              (org-agenda-view-columns-initially t)
# ;;              ))
# ;;            ;; Weekly review

# ;;            ("2" "Bi-weekly review" agenda "" ((org-agenda-span 14) (org-agenda-log-mode 1)))
# ;;            ("gb" "Business" todo ""  
# ;;             ((org-agenda-files '("~/personal/business.org"))
# ;;              (org-agenda-view-columns-initially t)))
# ;;            ("gc" "Coding" tags-todo "@coding" 
# ;;             ((org-agenda-view-columns-initially t)))
# ;;            ("gw" "Writing" tags-todo "@writing"
# ;;             ((org-agenda-view-columns-initially t)))
# ;;            ("gp" "Phone" tags-todo "@phone"
# ;;             ((org-agenda-view-columns-initially t)))
# ;;            ("gd" "Drawing" tags-todo "@drawing"
# ;;             ((org-agenda-view-columns-initially t)))
# ;;            ("gh" "Home" tags-todo "@home"
# ;;             ((org-agenda-view-columns-initially t)))
# ;;           ("ge" "Errands" tags-todo "@errands"
# ;;             ((org-agenda-view-columns-initially t)))
# ;;
# ;;            (")" "All by context"
# ;;             ,sacha/org-agenda-contexts
# ;;             ((org-agenda-sorting-strategy '(priority-down effort-down))
# ;;              (sacha/org-agenda-limit-items nil)))
# ;;            ("9" "Unscheduled top 3 by context"
# ;;             ,sacha/org-agenda-contexts
# ;;             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
# ;;             (org-agenda-sorting-strategy '(priority-down effort-down))
# ;;              (sacha/org-agenda-limit-items 3)))
# ;;            ("(" "All unscheduled by context"
# ;;             ,sacha/org-agenda-contexts
# ;;             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
# ;;              (org-agenda-sorting-strategy '(priority-down effort-down))
# ;;              ))
# ;;            ("d" "Timeline for today" ((agenda "" ))
# ;;             ((org-agenda-ndays 1)
# ;;              (org-agenda-show-log t)
# ;;              (org-agenda-log-mode-items '(clock closed))
# ;;              (org-agenda-clockreport-mode t)
# ;;              (org-agenda-entry-types '())))
# ;;            ("." "Waiting for" todo "WAITING")
# ;;            ("u" "Unscheduled tasks" tags-todo "-someday-TODO=\"SOMEDAY\"-TODO=\"DELEGATED\"-TODO=\"WAITING\"-project"
# ;;             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
# ;;              (org-agenda-view-columns-initially t)
# ;;              (org-tags-exclude-from-inheritance '("project"))
# ;;              (org-agenda-overriding-header "Unscheduled TODO entries: ")
# ;;              (org-columns-default-format "%50ITEM %TODO %3PRIORITY %Effort{:} %TAGS")
# ;;              (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up tag-up category-keep))))
# ;;            ("U" "Unscheduled tasks outside projects" tags-todo "-project"
# ;;             ((org-agenda-skip-function 'sacha/org-agenda-skip-scheduled)
# ;;              (org-tags-exclude-from-inheritance nil)
# ;;              (org-agenda-view-columns-initially t)
# ;;              (org-agenda-overriding-header "Unscheduled TODO entries outside projects: ")
# ;;              (org-agenda-sorting-strategy '(todo-state-up priority-down tag-up category-keep effort-down))))
# ;;            ("P" "By priority"
# ;;             ((tags-todo "+PRIORITY=\"A\"")
# ;;              (tags-todo "+PRIORITY=\"B\"")
# ;;              (tags-todo "+PRIORITY=\"\"")
# ;;              (tags-todo "+PRIORITY=\"C\""))
# ;;             ((org-agenda-prefix-format "%-10c %-10T %e ")
# ;;              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
# ;;            ("pp" tags "+project-someday-TODO=\"DONE\""
# ;;             ((org-tags-exclude-from-inheritance '("project"))
# ;;              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
# ;;            ("p." tags "+project-TODO=\"DONE\""
# ;;             ((org-tags-exclude-from-inheritance '("project"))
# ;;              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
# ;;            ("S" tags-todo "TODO=\"STARTED\"")
# ;;            ("2" "List projects with tasks" sacha/org-agenda-projects-and-tasks
# ;;             "+PROJECT"
# ;;               ((sacha/org-agenda-limit-items 3)))))
# ;;  (bind-key "<apps> a" 'org-agenda)
# #+end_src

Make it easy to mark a task as done

#+begin_src emacs-lisp
;;  (defun sacha/org-agenda-done (&optional arg)
;;    "Mark current TODO as done.
;;    This changes the line at point, all other lines in the agenda referring to
;;    the same tree node, and the headline of the tree node in the Org-mode file."
;;    (interactive "P")
;;    (org-agenda-todo "DONE"))
;;    ;; Override the key definition for org-exit
;;  (define-key org-agenda-mode-map "x" 'sacha/org-agenda-done)
#+end_src

Make it easy to mark a task as done and create a follow-up task

#+begin_src emacs-lisp
;;  (defun sacha/org-agenda-mark-done-and-add-followup ()
;;    "Mark the current TODO as done and add another task after it.
;;    Creates it at the same level as the previous task, so it's better to use
;;    this with to-do items than with projects or headings."
;;    (interactive)
;;    (org-agenda-todo "DONE")
;;    (org-agenda-switch-to)
;;    (org-capture 0 "t"))
;;    ;; Override the key definition
;;  (define-key org-agenda-mode-map "X" 'sacha/org-agenda-mark-done-and-add-followup)
#+end_src

Capture something based on the agenda

#+begin_src emacs-lisp
;;(defun sacha/org-agenda-new ()
;;  "Create a new note or task at the current agenda item.
;;Creates it at the same level as the previous task, so it's better to use
;;this with to-do items than with projects or headings."
;;  (interactive)
;;  (org-agenda-switch-to)
;;  (org-capture 0))
;;;; New key assignment
;;(define-key org-agenda-mode-map "N" 'sacha/org-agenda-new)
#+end_src

** helper fns

inspired by http://doc.norang.ca/org-mode.html#GTD
#+begin_src emacs-lisp
  (defun xtof/is-project-p ()
    "headlines with tag 'project'"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (not (equal nil (search-forward ":PROJ:" subtree-end t nil))))))

  (defun xtof/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (xtof/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (setq has-next t)))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline ))))
#+end_src

** xtof/org-agenda-config

#+begin_src emacs-lisp
;;  (defvar xtof/org-agenda-contexts
;;    '((tags-todo "+@phone")
;;      (tags-todo "+@work")
;;      (tags-todo "+@drawing")
;;      (tags-todo "+@coding")
;;      (tags-todo "+@writing")
;;      (tags-todo "+@computer")
;;      (tags-todo "+@home")
;;      (tags-todo "+@errands"))
;;    "Usual list of contexts.")

  (defun xtof/org-agenda-config ()
    "init org agenda"
    (progn
      (setq org-agenda-tags-column -136)
      (setq org-agenda-use-tag-inheritance nil)
      (setq org-agenda-files (quote ("~/Documents/org/inbox.org"
                                     "~/Documents/org/activity_log.org"
                                     "~/Documents/org/meditation_log.org"
                                     "~/Documents/org/dream_log.org"
                                     "~/Documents/org/memos.org"
                                     "~/Documents/org/flagged.org"
                                     "~/Documents/org/projects.org"
                                     "~/Documents/org/notes.org"
                                     "/Users/fusupo/Documents/org/.org2blog.org"
                                     "/Users/fusupo/Documents/org/cooking.org")))
       (setq org-agenda-time-grid
           '((daily today require-timed)
           "----------------"
           (600 900 1200 1300 1800 2400)))
      
      (setq org-agenda-span 2)
      (setq org-agenda-sticky nil)
      (setq org-agenda-show-log t)
      (add-hook 'org-agenda-mode-hook (lambda () (hl-line-mode 1)))

      (setq org-agenda-custom-commands
            '(
              ("o" "Agenda and Office-related tasks"
               ((agenda ""
                        ((org-agenda-use-tag-inheritance nil)))
                (tags-todo "work")
                (tags "@work")))
              
              (" " "Agenda"
               ((agenda "" nil)
                (todo "NEXT"
                      ((org-columns-default-format "%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS %10CLOCKSUM")))
                (tags-todo "PROJ"
                      ((org-agenda-overriding-header "Stuck Projects")
                       (org-agenda-skip-function 'xtof/skip-non-stuck-projects)))
                (todo "WAITING"
                      ((org-agenda-overriding-header "Waiting")))))
              ))
      ))
#+end_src

** finialize

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure org
    :config (xtof/org-agenda-config)
    :bind
      (("C-c a" . org-agenda))
  )
#+end_src

* //////////////////////////////////////////////////////////////////////  ORG-AC

#+begin_src emacs-lisp
  (use-package org-ac
    :ensure org-ac
    :init (progn
      (org-ac/config-default)))
#+end_src

* ////////////////////////////////////////////////////////////////////  ORG2BLOG

#+begin_src emacs-lisp
  (use-package org2blog-autoloads
    :ensure org2blog
    :defer t
    :init (progn
            (setq org2blog/wp-blog-alist
                  '(("marcchristophe.com"
                     :url xtof/wp-blog-alist-url
                     :username xtof/wp-blog-alist-username)))))
#+end_src
